{"version":3,"sources":["webpack:///./src/components/ui/AppSpinner.vue","webpack:///./src/components/ui/AppSpinner.vue?670e","webpack:///./src/components/ui/AppSpinner.vue?b073","webpack:///./src/components/ui/AppSpinner.vue?0720","webpack:///./src/pages/home/HomeQueries.ts","webpack:///./src/pages/groups/GroupQueries.ts","webpack:///./src/hooks/useString.ts","webpack:///./src/pages/devices/Devices.vue","webpack:///./src/pages/devices/modals/DeviceCreateModal.vue","webpack:///./src/pages/devices/modals/DeviceCreateModal.vue?5618","webpack:///./src/pages/devices/modals/DeviceCreateModal.vue?a0aa","webpack:///./src/components/ui/controls/AppDeviceControl.vue","webpack:///./src/components/ui/controls/AppDeviceControl.vue?d8ce","webpack:///./src/components/ui/controls/AppDeviceControl.vue?0315","webpack:///./src/pages/devices/Devices.vue?79f1","webpack:///./src/pages/devices/Devices.vue?65ee","webpack:///./src/pages/devices/DeviceQueries.ts","webpack:///./src/pages/devices/DeviceDetails.vue","webpack:///./src/pages/devices/DeviceDetails.vue?89e0","webpack:///./src/pages/devices/DeviceDetails.vue?5923","webpack:///./src/components/ui/modals/AppModal.vue","webpack:///./src/components/ui/modals/AppModal.vue?589d","webpack:///./src/components/ui/modals/AppModal.vue?a73f","webpack:///./node_modules/core-js/modules/es.array.map.js","webpack:///./src/components/ui/cards/AppCard.vue","webpack:///./src/components/ui/cards/AppCard.vue?1483","webpack:///./src/hooks/useEnums.ts","webpack:///./src/pages/devices/DeviceMutations.ts"],"names":["ready","class","height","width","name","props","type","String","required","setup","render","__scopeId","GET_DEVICES_COUNT","GET_GROUPS_COUNT","GET_GROUPS","GET_GROUP_BY_ID","useString","capitalize","value","charAt","toUpperCase","slice","toLowerCase","showCreateModal","toggleCreateModal","error","message","loading","data","devices","device","key","id","icon-name","goToDetail","device-type-name","pluginTypes","toString","state","status","device-id","title","save-btn-title","close-btn-title","close","save","save-btn-active","saveBtnActive","main-bg-color","main-border-color","loadCreate","deviceCreateInput","placeholder","pluginNames","item","description","ipv4","groupName","companyName","pluginName","primaryConnection","connectionNames","secondaryConnection","errCreate","emits","components","AppModal","context","None","createDevice","executeMutation","fetching","emit","refetchOpts","refetchQueries","query","input","ConnectionTypes","typeFullName","deviceId","deviceTypeName","Object","default","AppIcon","AppCard","DeviceCreateModal","Loader","AppDeviceControl","router","requestPolicy","push","params","FRAGMENT_GET_DEVICE_STATUS","GET_DEVICE_BY_ID","GET_DEVICES","deviceResult","updatedDevice","disabled","ip","company","createdBy","loadUpdate","route","selectedPluginType","selectedPConnType","selectedSConnType","updateDevice","errUpdate","variables","xmlns","fill","viewBox","stroke","stroke-linecap","stroke-linejoin","stroke-width","d","to","mainBgColor","closeBtnTitle","saveBtnTitle","Function","Boolean","mainBorderColor","saveBtnColor","$","$map","map","arrayMethodHasSpeciesSupport","arrayMethodUsesToLength","HAS_SPECIES_SUPPORT","USES_TO_LENGTH","target","proto","forced","callbackfn","this","arguments","length","undefined","useEnumTypes","pluginTypesValues","connectionTypes","connectionTypesValues","keys","filter","e","isNaN","num","parseInt","CREATE_DEVICE","UPDATE_DEVICE"],"mappings":"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","file":"js/devices.f4e6c4dd.js","sourcesContent":["<template>\n  <div\n    v-if=\"ready\"\n    :class=\"`loader ease-linear rounded-full border-8 border-t-8 border-gray-200 ${height} ${width}`\"\n  ></div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue';\nimport { useTimeout } from '@vueuse/core';\n\nexport default defineComponent({\n  name: 'AppSpinner',\n  props: {\n    height: {\n      type: String,\n      required: true\n    },\n    width: {\n      type: String,\n      required: true\n    }\n  },\n  setup() {\n    const { ready } = useTimeout(300, true);\n    return {\n      ready\n    };\n  }\n});\n</script>\n\n<style scoped lang=\"scss\">\n.loader {\n  border-top-color: #3498db;\n  -webkit-animation: spinner 1.5s linear infinite;\n  animation: spinner 1.5s linear infinite;\n}\n\n@-webkit-keyframes spinner {\n  0% {\n    -webkit-transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n  }\n}\n\n@keyframes spinner {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n</style>\n","\nimport { defineComponent } from 'vue';\nimport { useTimeout } from '@vueuse/core';\n\nexport default defineComponent({\n  name: 'AppSpinner',\n  props: {\n    height: {\n      type: String,\n      required: true\n    },\n    width: {\n      type: String,\n      required: true\n    }\n  },\n  setup() {\n    const { ready } = useTimeout(300, true);\n    return {\n      ready\n    };\n  }\n});\n","import { render } from \"./AppSpinner.vue?vue&type=template&id=49072921&scoped=true\"\nimport script from \"./AppSpinner.vue?vue&type=script&lang=ts\"\nexport * from \"./AppSpinner.vue?vue&type=script&lang=ts\"\n\nimport \"./AppSpinner.vue?vue&type=style&index=0&id=49072921&scoped=true&lang=scss\"\nscript.render = render\nscript.__scopeId = \"data-v-49072921\"\n\nexport default script","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./AppSpinner.vue?vue&type=style&index=0&id=49072921&scoped=true&lang=scss\"","import gql from 'graphql-tag';\n\n/** Types */\nexport type GetDevicesCountQueryType = { __typename?: 'AppQueries' } & {\n  devicesCount: number;\n};\n\nexport type GetGroupsCountQueryType = { __typename?: 'AppQueries' } & {\n  groupsCount: number;\n};\n\n/** Queries */\nexport const GET_DEVICES_COUNT = gql`\n  query GetDevicesCount {\n    devicesCount\n  }\n`;\n\nexport const GET_GROUPS_COUNT = gql`\n  query GetGroupsCount {\n    groupsCount\n  }\n`;\n","import gql from 'graphql-tag';\n\nexport const GET_GROUPS = gql`\n  query GetGroups {\n    groups {\n      id\n      name\n      createdBy\n      lastModifiedBy\n      lastModifiedAt\n      createdAt\n      description\n      devices {\n        id\n        name\n        pluginName\n        pluginName\n      }\n    }\n  }\n`;\n\nexport const GET_GROUP_BY_ID = gql`\n  query GET_GROUP_BY_ID($name: String!) {\n    groups(where: { name: { eq: $name } }) {\n      id\n      name\n      createdBy\n      lastModifiedBy\n      lastModifiedAt\n      createdAt\n      description\n      devices {\n        id\n        name\n        pluginName\n        pluginName\n      }\n    }\n  }\n`;\n","type StringState = {\n  capitalize: (value: string) => string;\n};\n\nexport const useString = (): StringState => {\n  const capitalize = (value: string): string => value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();\n  return {\n    capitalize\n  };\n};\n","<template>\n  <div>\n    <DeviceCreateModal v-if=\"showCreateModal\" @close=\"toggleCreateModal\" />\n\n    <!-- Buttons -->\n    <div class=\"w-full\">\n      <div class=\"flex justify-between items-center mb-4\">\n        <!-- Add Button -->\n        <div class=\"flex justify-start w-full md:w-1/3 xl:w-1/6\">\n          <button\n            @click=\"toggleCreateModal\"\n            class=\"block w-full px-4 py-2 mt-4 text-sm text-gray-600 font-medium leading-5 text-center bg-white hover:text-white hover:bg-indigo-400 border border-transparent rounded-lg active:bg-primary focus:outline-none\"\n          >\n            Add Device\n          </button>\n        </div>\n      </div>\n    </div>\n    <!-- Show devices -->\n    <template v-if=\"error\">\n      <p>Error: {{ error.name }} - {{ error.message }}</p>\n    </template>\n    <template v-else-if=\"loading\">\n      <Loader height=\"h-48\" width=\"w-48\" />\n    </template>\n    <template v-if=\"data\">\n      <div v-if=\"data.devices\">\n        <div class=\"grid xl:grid-cols-6 md:grid-cols-4 grid-cols-2 gap-4 rounded\">\n          <AppCard class=\"bg-white w-full\" v-for=\"device in data.devices\" :key=\"device.id\">\n            <div v-if=\"device\" class=\"w-full\">\n              <div class=\"flex flex-row justify-between items-center content-center\">\n                <h1 class=\"text-xl text-left text-gray-600 font-bold\">\n                  {{ device.name }}\n                </h1>\n                <AppIcon\n                  icon-name=\"Edit\"\n                  @click=\"goToDetail(device.name)\"\n                  class=\"cursor-pointer p-1 rounded focus:outline-none hover:ring-2 hover:ring-primaryBlue hover:ring-opacity-50 mr-1\"\n                />\n              </div>\n\n              <div class=\"border-border border-t my-2\"></div>\n              <div class=\"flex justify-center\">\n                <AppDeviceControl\n                  :device-type-name=\"capitalize(device.pluginTypes.toString())\"\n                  :state=\"device.status\"\n                  :device-id=\"device.id\"\n                ></AppDeviceControl>\n              </div>\n            </div>\n            <div v-else>Error loading device ...</div>\n          </AppCard>\n        </div>\n      </div>\n      <div v-else>No devices available</div>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { reactive, toRefs, defineComponent } from 'vue';\nimport AppCard from '@/components/ui/cards/AppCard.vue';\nimport DeviceCreateModal from './modals/DeviceCreateModal.vue';\nimport { useQuery } from '@urql/vue';\nimport Loader from '@/components/ui/AppSpinner.vue';\nimport { GetDevicesQueryType, GET_DEVICES } from './DeviceQueries';\nimport { useRouter } from 'vue-router';\nimport AppDeviceControl from '../../components/ui/controls/AppDeviceControl.vue';\nimport { SetLightStateDocument, SetLightStateQueryType, useSetLightStateQuery } from '../../graphql/queries/useSetLightStateQuery';\nimport AppIcon from \"@/components/icons/AppIcon.vue\";\nimport { useString } from \"@/hooks/useString\";\n\nexport default defineComponent({\n  name: 'Devices',\n  components: {\n    AppIcon,\n    AppCard,\n    DeviceCreateModal,\n    Loader,\n    AppDeviceControl\n  },\n  setup() {\n    const router = useRouter();\n    const { data, fetching: loading, error } = useQuery<GetDevicesQueryType>({ query: GET_DEVICES, requestPolicy: 'network-only' });\n    const state = reactive({\n      showCreateModal: false\n    });\n\n    const toggleCreateModal = () => {\n      state.showCreateModal = !state.showCreateModal;\n    };\n\n    const goToDetail = (name: string) => {\n      router.push({ name: 'DeviceDetails', params: { name: name } });\n    };\n\n    return {\n      ...toRefs(state),\n      ...useString(),\n      loading,\n      error,\n      data,\n      toggleCreateModal,\n      goToDetail\n    };\n  }\n});\n</script>\n","<template>\n  <AppModal\n    title=\"Create new Device\"\n    save-btn-title=\"Create\"\n    close-btn-title=\"Cancel\"\n    :close=\"close\"\n    :save=\"save\"\n    :save-btn-active=\"saveBtnActive\"\n    main-bg-color=\"bg-yellow-400\"\n    main-border-color=\"border-yellow-400\"\n    :loading=\"loadCreate\"\n  >\n    <div class=\"flex justify-between\">\n      <div class=\"w-full mr-2\">\n        <label class=\"text-left block text-sm\">\n          <span class=\"text-gray-600 dark:text-gray-400\">Name</span>\n          <input\n            type=\"text\"\n            v-model=\"deviceCreateInput.name\"\n            class=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n            placeholder=\"Name\"\n          />\n        </label>\n      </div>\n      <div class=\"w-1/3 ml-2\">\n        <label class=\"text-left block text-sm\">\n          <span class=\"text-gray-600 dark:text-gray-400\">PluginType</span>\n          <select\n            v-model=\"deviceCreateInput.pluginTypes\"\n            class=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n          >\n            <option v-for=\"(item, key) in pluginNames\" :key=\"key\" :value=\"item.toUpperCase()\">\n              {{ item }}\n            </option>\n          </select>\n        </label>\n      </div>\n    </div>\n    <!-- Description and ipv4 -->\n    <div class=\"flex justify-between mt-3\">\n      <div class=\"w-full mr-2\">\n        <label class=\"text-left block text-sm\">\n          <span class=\"text-gray-600 dark:text-gray-400\">Description</span>\n          <input\n            type=\"text\"\n            v-model=\"deviceCreateInput.description\"\n            class=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n            placeholder=\"Description (optional)\"\n          />\n        </label>\n      </div>\n      <div class=\"w-1/3 ml-2\">\n        <label class=\"text-left block text-sm\">\n          <span class=\"text-gray-600 dark:text-gray-400\">Ipv4</span>\n          <input\n            type=\"text\"\n            v-model=\"deviceCreateInput.ipv4\"\n            class=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n            placeholder=\"Ipv4\"\n          />\n        </label>\n      </div>\n    </div>\n    <!-- GroupName -->\n    <div class=\"flex justify-between mt-3\">\n      <div class=\"w-full mr-2\">\n        <label class=\"text-left block text-sm\">\n          <span class=\"text-gray-600 dark:text-gray-400\">Groupname</span>\n          <input\n            type=\"text\"\n            v-model=\"deviceCreateInput.groupName\"\n            class=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n            placeholder=\"Group name (optional)\"\n          />\n        </label>\n      </div>\n    </div>\n    <!-- Company and pluginName -->\n    <div class=\"flex justify-between mt-3\">\n      <div class=\"w-1/2 mr-2\">\n        <label class=\"text-left block text-sm\">\n          <span class=\"text-gray-600 dark:text-gray-400\">Companyname</span>\n          <input\n            type=\"text\"\n            v-model=\"deviceCreateInput.companyName\"\n            class=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n            placeholder=\"Company description\"\n          />\n        </label>\n      </div>\n      <div class=\"w-1/2 ml-2\">\n        <label class=\"text-left block text-sm\">\n          <span class=\"text-gray-600 dark:text-gray-400\">Pluginname</span>\n          <input\n            type=\"text\"\n            v-model=\"deviceCreateInput.pluginName\"\n            class=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n            placeholder=\"Plugin name\"\n          />\n        </label>\n      </div>\n    </div>\n    <!-- ConnectionTypes -->\n    <div class=\"flex justify-between mt-3\">\n      <div class=\"w-1/2\">\n        <label class=\"text-left block text-sm\">\n          <span class=\"text-gray-600 dark:text-gray-400\">Primary connection</span>\n          <select\n            v-model=\"deviceCreateInput.primaryConnection\"\n            class=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n          >\n            <option v-for=\"(item, key) in connectionNames\" :key=\"key\" :value=\"item.toUpperCase()\">\n              {{ item }}\n            </option>\n          </select>\n        </label>\n      </div>\n      <div class=\"w-1/2 ml-2\">\n        <label class=\"text-left block text-sm\">\n          <span class=\"text-gray-600 dark:text-gray-400\">Secondary connection</span>\n          <select\n            v-model=\"deviceCreateInput.secondaryConnection\"\n            class=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n          >\n            <option v-for=\"(item, key) in connectionNames\" :key=\"key\" :value=\"item.toUpperCase()\">\n              {{ item }}\n            </option>\n          </select>\n        </label>\n      </div>\n    </div>\n    <template v-if=\"errCreate\">\n      <div class=\"flex items-center pt-1 justify-center w-full h-full text-red-500\">\n        <p>Error: {{ errCreate.name }} {{ errCreate.message }}</p>\n      </div>\n    </template>\n  </AppModal>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, reactive, computed } from 'vue';\nimport AppModal from '@/components/ui/modals/AppModal.vue';\nimport { CreateDeviceInput } from '@/types/graphql/inputs';\nimport { ConnectionTypes, PluginTypes } from '@/types/enums';\nimport { useEnumTypes } from '@/hooks/useEnums.ts';\nimport { useMutation } from '@urql/vue';\nimport { CREATE_DEVICE } from '../DeviceMutations';\nimport { GET_DEVICES } from '../DeviceQueries';\nimport { GET_DEVICES_COUNT } from '@/pages/home/HomeQueries';\nimport { GET_GROUPS } from '@/pages/groups/GroupQueries';\n\nexport default defineComponent({\n  name: 'DeviceCreateModal',\n  emits: ['close'],\n  components: {\n    AppModal\n  },\n  setup(props, context) {\n    const deviceCreateInput = reactive<CreateDeviceInput>({\n      name: '',\n      groupName: '',\n      ipv4: '',\n      companyName: '',\n      pluginName: '',\n      pluginTypes: PluginTypes.None.toString(),\n      primaryConnection: ConnectionTypes.None.toString(),\n      secondaryConnection: ConnectionTypes.None.toString()\n    });\n    const { executeMutation: createDevice, fetching: loadCreate, error: errCreate } = useMutation(CREATE_DEVICE);\n    const saveBtnActive = computed(() => deviceCreateInput.name !== '' && deviceCreateInput.ipv4 !== '');\n    const close = () => {\n      context.emit('close', false);\n    };\n    const save = async () => {\n      let refetchOpts = { refetchQueries: [{ query: GET_DEVICES }, { query: GET_DEVICES_COUNT }] };\n      if (deviceCreateInput.groupName) {\n        refetchOpts.refetchQueries = [\n          { query: GET_DEVICES },\n          { query: GET_DEVICES_COUNT },\n          { query: GET_GROUPS }\n        ];\n      }\n      // TODO remove refetchOpts\n      await createDevice({ input: deviceCreateInput });\n      context.emit('close', false);\n    };\n    return {\n      deviceCreateInput,\n      ConnectionTypes,\n      saveBtnActive,\n      close,\n      save,\n      loadCreate,\n      errCreate,\n      ...useEnumTypes()\n    };\n  }\n});\n</script>\n\n<style scoped></style>\n","\nimport { defineComponent, reactive, computed } from 'vue';\nimport AppModal from '@/components/ui/modals/AppModal.vue';\nimport { CreateDeviceInput } from '@/types/graphql/inputs';\nimport { ConnectionTypes, PluginTypes } from '@/types/enums';\nimport { useEnumTypes } from '@/hooks/useEnums.ts';\nimport { useMutation } from '@urql/vue';\nimport { CREATE_DEVICE } from '../DeviceMutations';\nimport { GET_DEVICES } from '../DeviceQueries';\nimport { GET_DEVICES_COUNT } from '@/pages/home/HomeQueries';\nimport { GET_GROUPS } from '@/pages/groups/GroupQueries';\n\nexport default defineComponent({\n  name: 'DeviceCreateModal',\n  emits: ['close'],\n  components: {\n    AppModal\n  },\n  setup(props, context) {\n    const deviceCreateInput = reactive<CreateDeviceInput>({\n      name: '',\n      groupName: '',\n      ipv4: '',\n      companyName: '',\n      pluginName: '',\n      pluginTypes: PluginTypes.None.toString(),\n      primaryConnection: ConnectionTypes.None.toString(),\n      secondaryConnection: ConnectionTypes.None.toString()\n    });\n    const { executeMutation: createDevice, fetching: loadCreate, error: errCreate } = useMutation(CREATE_DEVICE);\n    const saveBtnActive = computed(() => deviceCreateInput.name !== '' && deviceCreateInput.ipv4 !== '');\n    const close = () => {\n      context.emit('close', false);\n    };\n    const save = async () => {\n      let refetchOpts = { refetchQueries: [{ query: GET_DEVICES }, { query: GET_DEVICES_COUNT }] };\n      if (deviceCreateInput.groupName) {\n        refetchOpts.refetchQueries = [\n          { query: GET_DEVICES },\n          { query: GET_DEVICES_COUNT },\n          { query: GET_GROUPS }\n        ];\n      }\n      // TODO remove refetchOpts\n      await createDevice({ input: deviceCreateInput });\n      context.emit('close', false);\n    };\n    return {\n      deviceCreateInput,\n      ConnectionTypes,\n      saveBtnActive,\n      close,\n      save,\n      loadCreate,\n      errCreate,\n      ...useEnumTypes()\n    };\n  }\n});\n","import { render } from \"./DeviceCreateModal.vue?vue&type=template&id=bf2a1208\"\nimport script from \"./DeviceCreateModal.vue?vue&type=script&lang=ts\"\nexport * from \"./DeviceCreateModal.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <component :is=\"typeFullName\" :state=\"state\" :device-id=\"deviceId\"></component>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue';\n\nexport default defineComponent({\n  name: 'AppDeviceControl',\n  props: {\n    deviceTypeName: {\n      type: String,\n      required: true\n    },\n    state: {\n      type: Object,\n      required: false,\n      default: null\n    },\n    deviceId: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props) {\n    const typeFullName = computed(() => props.deviceTypeName + 'Control');\n    return {\n      typeFullName\n    };\n  }\n});\n</script>\n","\nimport { computed, defineComponent } from 'vue';\n\nexport default defineComponent({\n  name: 'AppDeviceControl',\n  props: {\n    deviceTypeName: {\n      type: String,\n      required: true\n    },\n    state: {\n      type: Object,\n      required: false,\n      default: null\n    },\n    deviceId: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props) {\n    const typeFullName = computed(() => props.deviceTypeName + 'Control');\n    return {\n      typeFullName\n    };\n  }\n});\n","import { render } from \"./AppDeviceControl.vue?vue&type=template&id=4c63dd5f\"\nimport script from \"./AppDeviceControl.vue?vue&type=script&lang=ts\"\nexport * from \"./AppDeviceControl.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport { reactive, toRefs, defineComponent } from 'vue';\nimport AppCard from '@/components/ui/cards/AppCard.vue';\nimport DeviceCreateModal from './modals/DeviceCreateModal.vue';\nimport { useQuery } from '@urql/vue';\nimport Loader from '@/components/ui/AppSpinner.vue';\nimport { GetDevicesQueryType, GET_DEVICES } from './DeviceQueries';\nimport { useRouter } from 'vue-router';\nimport AppDeviceControl from '../../components/ui/controls/AppDeviceControl.vue';\nimport { SetLightStateDocument, SetLightStateQueryType, useSetLightStateQuery } from '../../graphql/queries/useSetLightStateQuery';\nimport AppIcon from \"@/components/icons/AppIcon.vue\";\nimport { useString } from \"@/hooks/useString\";\n\nexport default defineComponent({\n  name: 'Devices',\n  components: {\n    AppIcon,\n    AppCard,\n    DeviceCreateModal,\n    Loader,\n    AppDeviceControl\n  },\n  setup() {\n    const router = useRouter();\n    const { data, fetching: loading, error } = useQuery<GetDevicesQueryType>({ query: GET_DEVICES, requestPolicy: 'network-only' });\n    const state = reactive({\n      showCreateModal: false\n    });\n\n    const toggleCreateModal = () => {\n      state.showCreateModal = !state.showCreateModal;\n    };\n\n    const goToDetail = (name: string) => {\n      router.push({ name: 'DeviceDetails', params: { name: name } });\n    };\n\n    return {\n      ...toRefs(state),\n      ...useString(),\n      loading,\n      error,\n      data,\n      toggleCreateModal,\n      goToDetail\n    };\n  }\n});\n","import { render } from \"./Devices.vue?vue&type=template&id=4a7dfa7e\"\nimport script from \"./Devices.vue?vue&type=script&lang=ts\"\nexport * from \"./Devices.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","import { Device } from '@/types/types';\nimport { gql } from '@urql/core';\n\nexport const FRAGMENT_GET_DEVICE_STATUS = gql`\n  fragment DeviceStatus on Device {\n    status {\n      lights {\n        ison\n      }\n    }\n  }\n`;\n\n/** Variables */\nexport type GetDeviceByIdVariable = {\n  name: string;\n};\n\n/** Types */\nexport type GetDevicesQueryType = { __typename?: 'AppQueries' } & {\n  devices: Array<Device>;\n};\n\nexport const GET_DEVICE_BY_ID = gql`\n  query GET_DEVICE_BY_ID($name: String!) {\n    devices(where: { name: { eq: $name } }) {\n      id\n      name\n      description\n      primaryConnection\n      secondaryConnection\n      createdAt\n      lastModifiedAt\n      createdBy\n      lastModifiedBy\n      pluginName\n      pluginTypes\n      ip {\n        ipv4\n      }\n      company {\n        name\n        shortName\n      }\n    }\n  }\n`;\n\nexport const GET_DEVICES = gql`\n  query GetDevices {\n    devices {\n      id\n      name\n      primaryConnection\n      secondaryConnection\n      pluginName\n      pluginTypes\n      ip {\n        ipv4\n      }\n      company {\n        name\n        shortName\n      }\n      ...DeviceStatus\n    }\n  }\n  ${FRAGMENT_GET_DEVICE_STATUS}\n`;\n","<template>\n  <div class=\"relative flex-col w-full justify-end bg-white border p-3 rounded\">\n    <template v-if=\"loading\">\n      <div class=\"flex items-center justify-center w-full h-full\">\n        <Loader height=\"h-48\" width=\"w-48\" />\n      </div>\n    </template>\n    <template v-else-if=\"error\">\n      <div class=\"flex items-center justify-center w-full h-full\">\n        <p>Error: {{ error.name }} {{ error.message }}</p>\n      </div>\n    </template>\n    <template v-else-if=\"deviceResult && deviceResult.devices\">\n      <div class=\"flex justify-between\">\n        <div class=\"w-full mr-2\">\n          <label class=\"text-left block text-sm\">\n            <span class=\"text-gray-600 dark:text-gray-400\">Name</span>\n            <input\n              type=\"text\"\n              v-model=\"updatedDevice.name\"\n              class=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n              :placeholder=\"deviceResult.devices[0].name\"\n            />\n          </label>\n        </div>\n        <div class=\"w-1/3 ml-2\">\n          <label class=\"text-left block text-sm\">\n            <span class=\"text-gray-600 dark:text-gray-400\">PluginType</span>\n            <select\n              disabled\n              v-model=\"deviceResult.devices[0].pluginTypes\"\n              class=\"mt-1 text-gray-500 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n            >\n              <option v-for=\"(item, key) in pluginNames\" :key=\"key\" :value=\"item.toUpperCase()\">\n                {{ item }}\n              </option>\n            </select>\n          </label>\n        </div>\n      </div>\n      <!-- Description and ipv4 -->\n      <div class=\"flex justify-between mt-3\">\n        <div class=\"w-full mr-2\">\n          <label class=\"text-left block text-sm\">\n            <span class=\"text-gray-600 dark:text-gray-400\">Description</span>\n            <input\n              type=\"text\"\n              v-model=\"updatedDevice.description\"\n              class=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n              :placeholder=\"deviceResult.devices[0].description ?? 'Description'\"\n            />\n          </label>\n        </div>\n        <div class=\"w-1/3 ml-2\">\n          <label class=\"text-left block text-sm\">\n            <span class=\"text-gray-600 dark:text-gray-400\">Ipv4</span>\n            <input\n              type=\"text\"\n              v-model=\"updatedDevice.ipv4\"\n              class=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n              :placeholder=\"deviceResult.devices[0].ip.ipv4\"\n            />\n          </label>\n        </div>\n      </div>\n      <!-- Groupname -->\n      <!-- <div class=\"flex justify-between mt-3\">\n      <div class=\"w-full mr-2\">\n        <label class=\"text-left block text-sm\">\n          <span class=\"text-gray-600 dark:text-gray-400\">Groupname</span>\n          <input\n            v-model=\"deviceDetail.groupName\"\n            class=\"block w-full mt-1 text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400\n            focus:outline-none focus:shadow-outlineIndigo dark:text-gray-300 dark:focus:shadow-outline-gray form-input\"\n            placeholder=\"Group name (optional)\"\n          />\n        </label>\n      </div>\n    </div> -->\n      <!-- Company and pluginName -->\n      <div class=\"flex justify-between mt-3\">\n        <div class=\"w-1/2 mr-2\">\n          <label class=\"text-left block text-sm\">\n            <span class=\"text-gray-600 dark:text-gray-400\">Companyname</span>\n            <input\n              type=\"text\"\n              disabled\n              v-model=\"deviceResult.devices[0].company.name\"\n              class=\"mt-1 text-gray-500 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n              :placeholder=\"deviceResult.devices[0].company.name\"\n            />\n          </label>\n        </div>\n        <div class=\"w-1/2 ml-2\">\n          <label class=\"text-left block text-sm\">\n            <span class=\"text-gray-600 dark:text-gray-400\">Pluginname</span>\n            <input\n              type=\"text\"\n              disabled\n              v-model=\"deviceResult.devices[0].pluginName\"\n              class=\"mt-1 text-gray-500 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n              placeholder=\"Plugin name\"\n            />\n          </label>\n        </div>\n      </div>\n      <!-- ConnectionTypes -->\n      <div class=\"flex justify-between mt-3\">\n        <div class=\"w-1/2\">\n          <label class=\"text-left block text-sm\">\n            <span class=\"text-gray-600 dark:text-gray-400\">Primary connection</span>\n            <select\n              v-model=\"deviceResult.devices[0].primaryConnection\"\n              class=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n            >\n              <option v-for=\"(item, key) in connectionNames\" :key=\"key\" :value=\"item.toUpperCase()\">\n                {{ item }}\n              </option>\n            </select>\n          </label>\n        </div>\n        <div class=\"w-1/2 ml-2\">\n          <label class=\"text-left block text-sm\">\n            <span class=\"text-gray-600 dark:text-gray-400\">Secondary connection</span>\n            <select\n              v-model=\"deviceResult.devices[0].secondaryConnection\"\n              class=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md\"\n            >\n              <option v-for=\"(item, key) in connectionNames\" :key=\"key\" :value=\"item.toUpperCase()\">\n                {{ item }}\n              </option>\n            </select>\n          </label>\n        </div>\n      </div>\n      <div class=\"text-gray-500 text-sm text-left mt-10\">\n        Creator: {{ deviceResult.devices[0].createdBy }}\n      </div>\n      <!-- Save btn -->\n      <div class=\"flex items-center justify-start mt-4\">\n        <button\n          class=\"bg-transparent border-indigo-400 border border-solid font-bold uppercase text-sm pl-4 pr-6 py-3 rounded outline-none focus:outline-none\"\n          type=\"button\"\n          @click=\"save\"\n          :class=\"[\n            !loadUpdate\n              ? `hover:bg-indigo-400 hover:text-white text-gray-600`\n              : 'opacity-50 focus:outline-none cursor-not-allowed'\n          ]\"\n          :disabled=\"loadUpdate\"\n        >\n          <span class=\"flex\">\n            <Loader v-if=\"loadUpdate\" height=\"h-2\" width=\"w-2\" />\n            <span class=\"pl-2\">Save</span>\n          </span>\n        </button>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, reactive, ref } from 'vue';\nimport Loader from '@/components/ui/AppSpinner.vue';\nimport { UpdateDeviceInput } from '@/types/graphql/inputs';\nimport { useMutation, useQuery } from '@urql/vue';\nimport { UPDATE_DEVICE } from './DeviceMutations';\nimport { GetDeviceByIdVariable, GetDevicesQueryType, GET_DEVICE_BY_ID } from './DeviceQueries';\nimport { useEnumTypes } from '@/hooks/useEnums';\nimport { useRoute } from 'vue-router';\nimport { DevicePayload } from '@/types/graphql/payloads';\n\nexport default defineComponent({\n  name: 'DeviceDetails',\n  components: {\n    Loader\n  },\n  setup() {\n    const route = useRoute();\n    const selectedPluginType = ref<number>();\n    const selectedPConnType = ref<number>();\n    const selectedSConnType = ref<number>();\n    const updatedDevice: UpdateDeviceInput = reactive({\n      id: ''\n    });\n    const {\n      executeMutation: updateDevice,\n      fetching: loadUpdate,\n      error: errUpdate\n    } = useMutation<DevicePayload>(UPDATE_DEVICE);\n    const { data: deviceResult, fetching: loading, error } = useQuery<GetDevicesQueryType, GetDeviceByIdVariable>({\n      query: GET_DEVICE_BY_ID,\n      variables: { name: route.params.name as string }\n    });\n\n    const save = async () => {\n      if (typeof deviceResult.value?.devices !== 'undefined') {\n        updatedDevice.id = deviceResult.value.devices[0].id;\n        updatedDevice.primaryConnection = deviceResult.value?.devices[0].primaryConnection;\n        updatedDevice.secondaryConnection = deviceResult.value?.devices[0].secondaryConnection;\n        await updateDevice({ input: updatedDevice });\n      }\n    };\n\n    return {\n      loadUpdate,\n      errUpdate,\n      deviceResult,\n      loading,\n      error,\n      updatedDevice,\n      selectedPluginType,\n      selectedPConnType,\n      selectedSConnType,\n      save,\n      ...useEnumTypes()\n    };\n  }\n});\n</script>\n\n<style scoped></style>\n","\nimport { defineComponent, reactive, ref } from 'vue';\nimport Loader from '@/components/ui/AppSpinner.vue';\nimport { UpdateDeviceInput } from '@/types/graphql/inputs';\nimport { useMutation, useQuery } from '@urql/vue';\nimport { UPDATE_DEVICE } from './DeviceMutations';\nimport { GetDeviceByIdVariable, GetDevicesQueryType, GET_DEVICE_BY_ID } from './DeviceQueries';\nimport { useEnumTypes } from '@/hooks/useEnums';\nimport { useRoute } from 'vue-router';\nimport { DevicePayload } from '@/types/graphql/payloads';\n\nexport default defineComponent({\n  name: 'DeviceDetails',\n  components: {\n    Loader\n  },\n  setup() {\n    const route = useRoute();\n    const selectedPluginType = ref<number>();\n    const selectedPConnType = ref<number>();\n    const selectedSConnType = ref<number>();\n    const updatedDevice: UpdateDeviceInput = reactive({\n      id: ''\n    });\n    const {\n      executeMutation: updateDevice,\n      fetching: loadUpdate,\n      error: errUpdate\n    } = useMutation<DevicePayload>(UPDATE_DEVICE);\n    const { data: deviceResult, fetching: loading, error } = useQuery<GetDevicesQueryType, GetDeviceByIdVariable>({\n      query: GET_DEVICE_BY_ID,\n      variables: { name: route.params.name as string }\n    });\n\n    const save = async () => {\n      if (typeof deviceResult.value?.devices !== 'undefined') {\n        updatedDevice.id = deviceResult.value.devices[0].id;\n        updatedDevice.primaryConnection = deviceResult.value?.devices[0].primaryConnection;\n        updatedDevice.secondaryConnection = deviceResult.value?.devices[0].secondaryConnection;\n        await updateDevice({ input: updatedDevice });\n      }\n    };\n\n    return {\n      loadUpdate,\n      errUpdate,\n      deviceResult,\n      loading,\n      error,\n      updatedDevice,\n      selectedPluginType,\n      selectedPConnType,\n      selectedSConnType,\n      save,\n      ...useEnumTypes()\n    };\n  }\n});\n","import { render } from \"./DeviceDetails.vue?vue&type=template&id=28459a12\"\nimport script from \"./DeviceDetails.vue?vue&type=script&lang=ts\"\nexport * from \"./DeviceDetails.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <teleport to=\"body\">\n    <div>\n      <div class=\"opacity-25 fixed inset-0 z-40 bg-black\"></div>\n      <div\n        class=\"overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none justify-center items-center flex\"\n      >\n        <div class=\"relative md:w-10/12 xl:w-1/2 w-11/12 my-6 mx-auto max-w-3xl\">\n          <!--content-->\n          <div\n            class=\"border-0 rounded-lg shadow-md relative flex flex-col w-full bg-white outline-none focus:outline-none\"\n          >\n            <!--header-->\n            <div\n              class=\"flex items-start justify-between p-5 border-b border-solid border-gray-300 rounded-t\"\n              :class=\"[`${mainBgColor}`]\"\n            >\n              <h3 class=\"text-3xl font-semibold text-white\">\n                {{ title }}\n              </h3>\n              <button class=\"p-1 ml-auto outline-none focus:outline-none\" @click=\"close\">\n                <svg\n                  class=\"h-5 w-5 text-white\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                    d=\"M6 18L18 6M6 6l12 12\"\n                  />\n                </svg>\n              </button>\n            </div>\n            <!--body-->\n            <div class=\"relative p-6 flex-auto\">\n              <slot />\n            </div>\n            <!--footer-->\n            <div class=\"flex items-center justify-end p-3 border-t border-solid border-gray-300 rounded-b\">\n              <button\n                class=\"text-red-400 border solid hover:border-red-400 bg-white font-bold uppercase px-6 py-3 text-sm mr-2 rounded\"\n                type=\"button\"\n                @click=\"close\"\n              >\n                {{ closeBtnTitle }}\n              </button>\n              <button\n                class=\"bg-transparent border border-solid font-bold uppercase text-sm pl-4 pr-6 py-3 rounded outline-none focus:outline-none\"\n                type=\"button\"\n                @click=\"save\"\n                :class=\"[\n                  `${mainBorderColor}`,\n                  saveBtnActive && !loading\n                    ? `hover:${mainBgColor} hover:text-white text-gray-600`\n                    : 'opacity-50 focus:outline-none cursor-not-allowed'\n                ]\"\n                :disabled=\"!saveBtnActive || loading\"\n              >\n                <span class=\"flex\">\n                  <Loader v-if=\"loading\" height=\"h-2\" width=\"w-2\" />\n                  <span class=\"pl-2\">{{ saveBtnTitle }}</span>\n                </span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </teleport>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, toRefs } from 'vue';\nimport Loader from '@/components/ui/AppSpinner.vue';\n\nexport default defineComponent({\n  name: 'AppModal',\n  props: {\n    title: {\n      type: String,\n      required: true\n    },\n    saveBtnTitle: {\n      type: String,\n      required: true\n    },\n    closeBtnTitle: {\n      type: String,\n      required: true\n    },\n    close: {\n      type: Function as PropType<() => void>,\n      required: true\n    },\n    save: {\n      type: Function as PropType<() => void>,\n      required: true\n    },\n    saveBtnActive: {\n      type: Boolean,\n      default: true\n    },\n    mainBgColor: {\n      type: String,\n      default: 'bg-indigo-400'\n    },\n    mainBorderColor: {\n      type: String,\n      default: 'border-indigo-400'\n    },\n    saveBtnColor: {\n      type: String,\n      default: 'bg-indigo-400'\n    },\n    loading: {\n      type: Boolean,\n      required: true\n    }\n  },\n  components: {\n    Loader\n  },\n  setup(props) {\n    return {\n      ...toRefs(props)\n    };\n  }\n});\n</script>\n\n<style scoped></style>\n","\nimport { defineComponent, PropType, toRefs } from 'vue';\nimport Loader from '@/components/ui/AppSpinner.vue';\n\nexport default defineComponent({\n  name: 'AppModal',\n  props: {\n    title: {\n      type: String,\n      required: true\n    },\n    saveBtnTitle: {\n      type: String,\n      required: true\n    },\n    closeBtnTitle: {\n      type: String,\n      required: true\n    },\n    close: {\n      type: Function as PropType<() => void>,\n      required: true\n    },\n    save: {\n      type: Function as PropType<() => void>,\n      required: true\n    },\n    saveBtnActive: {\n      type: Boolean,\n      default: true\n    },\n    mainBgColor: {\n      type: String,\n      default: 'bg-indigo-400'\n    },\n    mainBorderColor: {\n      type: String,\n      default: 'border-indigo-400'\n    },\n    saveBtnColor: {\n      type: String,\n      default: 'bg-indigo-400'\n    },\n    loading: {\n      type: Boolean,\n      required: true\n    }\n  },\n  components: {\n    Loader\n  },\n  setup(props) {\n    return {\n      ...toRefs(props)\n    };\n  }\n});\n","import { render } from \"./AppModal.vue?vue&type=template&id=607d67b1\"\nimport script from \"./AppModal.vue?vue&type=script&lang=ts\"\nexport * from \"./AppModal.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","'use strict';\nvar $ = require('../internals/export');\nvar $map = require('../internals/array-iteration').map;\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');\n// FF49- issue\nvar USES_TO_LENGTH = arrayMethodUsesToLength('map');\n\n// `Array.prototype.map` method\n// https://tc39.es/ecma262/#sec-array.prototype.map\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","<template>\n  <div class=\"relative flex-1 h-full max-w-4xl mx-auto overflow-hidden rounded p-3\">\n    <div class=\"flex flex-col overflow-y-auto md:flex-row\">\n      <slot />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\n\nexport default defineComponent({\n  name: 'AppCard'\n});\n</script>\n\n<style scoped></style>\n","import { render } from \"./AppCard.vue?vue&type=template&id=6e58d4cc\"\nimport script from \"./AppCard.vue?vue&type=script&lang=js\"\nexport * from \"./AppCard.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","import { ConnectionTypes, PluginTypes } from '@/types/enums';\nimport { reactive, ToRefs, toRefs } from 'vue';\n\ntype State = {\n  pluginTypesValues: number[];\n  pluginNames: string[];\n  pluginTypes: PluginTypes;\n  connectionNames: string[];\n  connectionTypes: ConnectionTypes;\n  connectionTypesValues: number[];\n};\n\nexport const useEnumTypes = (): ToRefs<State> => {\n  const state = reactive<State>({\n    pluginTypesValues: [] as number[],\n    pluginNames: [] as string[],\n    pluginTypes: PluginTypes.None,\n    connectionNames: [] as string[],\n    connectionTypes: ConnectionTypes.None,\n    connectionTypesValues: [] as number[]\n  });\n  state.pluginNames = Object.keys(PluginTypes).filter((e) => isNaN(+e));\n  state.pluginTypesValues = Object.keys(PluginTypes)\n    .filter((e) => !isNaN(+e))\n    .map((num) => parseInt(num));\n  state.connectionNames = Object.keys(ConnectionTypes).filter((e) => isNaN(+e));\n  state.connectionTypesValues = Object.keys(ConnectionTypes)\n    .filter((e) => !isNaN(+e))\n    .map((num) => parseInt(num));\n\n  return {\n    ...toRefs(state)\n  };\n}\n","import { gql } from '@urql/core';\n\nexport const CREATE_DEVICE = gql`\n  mutation CreateDevice($input: CreateDeviceInput!) {\n    createDevice(input: $input) {\n      device {\n        id\n      }\n      errors {\n        message\n        code\n      }\n    }\n  }\n`;\nexport const UPDATE_DEVICE = gql`\n  mutation UPDATE_DEVICE($input: UpdateDeviceInput!) {\n    updateDevice(input: $input) {\n      device {\n        id\n      }\n      errors {\n        message\n        code\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}