# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger: # when to trigger a build
  batch: true # means that if there are more changes when build is running, they will be waited for instead of starting a parallel build
  branches:
    include:
      - master
pr:
  branches:
    include:
    - master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  linx64: 'linux-x64'

steps:
  - task: NuGetCommand@2
    displayName: Restore
    inputs:
      restoreSolution: '$(solution)'
      verbosityRestore: 'Normal'
      feedsToUse: 'select'

  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'SmartHub-SonarCloud'
      organization: 'smarthub-io'
      scannerMode: 'MSBuild'
      projectKey: 'smarthub-io'
      projectName: 'SmartHub'

  - task: VSBuild@1
    displayName: Build
    inputs:
      solution: '$(solution)'
      msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
  # - task: Visual Studio IntelliCode Team Model Training@0
  #   inputs:
  #     branch: 'develop'
  #     intelliCodeServiceEndpoint: 'IntelliCode'
  - task: VSTest@2
    displayName: Test
    inputs:
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - task: SonarCloudAnalyze@1
    displayName: Sonar Analyze
  - task: SonarCloudPublish@1
    displayName: Sonar Publish
    inputs:
      pollingTimeoutSec: '200'

  - task: DotNetCoreCLI@2
    displayName: Publish
    inputs:
      command: 'publish'
      publishWebProjects: true
      arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
      zipAfterPublish: true

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
      artifactName: 'SmartHub_$(imageName)'
